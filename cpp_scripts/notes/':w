#An introduction to `std` lists
##An introduction to `std::array`
`std::array` provides fixed array functionality that won't decay when passed into a function.
Unlike built-in fixed arrays, with `std::array` you can not omit the array length when providing an initializer:
```cpp
std::array<int, > myArray{9,4,3,5,6}; // illegal, array length must be provided
std::array<int> myArray{9,4, 3, 5,6}; // illegal, array length must be provided
```
You can also assign values to the array using an initializer list
```cpp
sdt::array<int, 5> myArray;
myArray = {0, 1, 2, 3, 4};      // okay
myArray = {9, 8, 7};            // okay, elements 3 and 4 are set to zero
myArray = {0, 1, 2, 3, 4, 5};   // not allowed, too many elements in initializer list
```
##An introduction to `std::vector`
`std::vector` provides dynamic array functionality that handles its own memory management.
###Self-cleanup prevents memory leaks
###Vectors remember their length
###Resizing a vector
Resizing a `std::vector` is as simple as calling the `resize()` function.
Frist, when we resized the vector, the existing element values were preserved.
Second, new elements are initialized to the default value for the type (which is 0 for integers).
