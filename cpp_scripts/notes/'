#The stack and the heap
The memory that a program uses is typically divided into a few different areas, called segments:
- The **code segment** (also called a text segment), where the compiled program sits in memory. The code setment is typically read-only
- The **bss segment** (also called the uninitialized data segment), where zero-initialized global and static variables are stored.
- The **data segment** (also called the initialized data segment), where initialized global and static variables are stored.
- The **heap**, where dynamically allocated variables are allocated from.
- The **call stack**, where function parameters, local variables, and other function-related information are stored.

###The heap segment
The heap segment keeps track of memory used for dynamic memory allocation.
It is worth knowing that sequential memory requests may not result in sequential memory addresses being allocated.
The heap has advantages and disadvantages:
- Allocating memory ont he heap is comparatively slow.
- Allocated memory stays allocated until it is specifically deallocated (beware memory leaks) or the application ends.
- Dynamicallyj allocated memory must be accessed through a pointer. Deferencing a pointer is slower than asccessing a variable directly.
- Because the heap is a big pool of memory, large arrays, structures, or classes can be allocated here.

###The call stack
The call stack has a much more interesting role to play. The call stack keeps track of all the active functions (those that have been called but have not yet terminated) from the start of the program to the current point of execution, and handles allocation of all function parameters and local variables.
